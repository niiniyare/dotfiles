"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleIgnore = exports.concatExtend = exports.getExtend = exports.getPluginsArray = exports.extendBase = void 0;

var _path = _interopRequireDefault(require("path"));

var _ = require("./..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const extendBase = {
  _app: {
    import: [],
    inner: [],
    wrapper: []
  },
  _document: {
    import: [],
    initialProps: []
  }
};
exports.extendBase = extendBase;

const getPluginsArray = answers => {
  return Object.entries(answers).reduce((acc, [key, value]) => {
    if (typeof value === "boolean" && value) return [...acc, key];
    if (typeof value === "string") return [...acc, value];
    if (Array.isArray(value)) return [...acc, ...value];
    return acc;
  }, []).filter(value => value !== "none" && value !== "no");
};

exports.getPluginsArray = getPluginsArray;

const getExtend = (pluginPath, pluginName) => {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const pluginExtend = require(_path.default.join(pluginPath, "plugins", pluginName, "extend.js"));

    return pluginExtend;
  } catch (e) {
    return undefined;
  }
};

exports.getExtend = getExtend;

const concatExtend = (base, plugins, sourcePath, answers) => {
  const merged = (0, _.mergeWithUnionArray)(base, ...plugins.map(plugin => {
    const pluginExtendFile = getExtend(sourcePath, plugin);

    if (pluginExtendFile) {
      const pluginExtends = pluginExtendFile.extend(answers);
      return pluginExtends;
    }

    return {};
  }));
  return merged;
};

exports.concatExtend = concatExtend;

const handleIgnore = (ignores, answers, plugin) => {
  const filters = {};
  ignores.forEach(ignore => {
    if (!!ignore.plugin === false || !!ignore.plugin && ignore.plugin.includes(plugin)) {
      var _ignore$when;

      const condition = (_ignore$when = ignore.when) === null || _ignore$when === void 0 ? void 0 : _ignore$when.call(ignore, answers);

      if (condition) {
        ignore.pattern.forEach(pattern => {
          filters[pattern] = false;
        });
      }
    }
  });
  return filters;
};

exports.handleIgnore = handleIgnore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9IZWxwZXIvcGx1Z2luL2luZGV4LnRzIl0sIm5hbWVzIjpbImV4dGVuZEJhc2UiLCJfYXBwIiwiaW1wb3J0IiwiaW5uZXIiLCJ3cmFwcGVyIiwiX2RvY3VtZW50IiwiaW5pdGlhbFByb3BzIiwiZ2V0UGx1Z2luc0FycmF5IiwiYW5zd2VycyIsIk9iamVjdCIsImVudHJpZXMiLCJyZWR1Y2UiLCJhY2MiLCJrZXkiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImZpbHRlciIsImdldEV4dGVuZCIsInBsdWdpblBhdGgiLCJwbHVnaW5OYW1lIiwicGx1Z2luRXh0ZW5kIiwicmVxdWlyZSIsInBhdGgiLCJqb2luIiwiZSIsInVuZGVmaW5lZCIsImNvbmNhdEV4dGVuZCIsImJhc2UiLCJwbHVnaW5zIiwic291cmNlUGF0aCIsIm1lcmdlZCIsIm1hcCIsInBsdWdpbiIsInBsdWdpbkV4dGVuZEZpbGUiLCJwbHVnaW5FeHRlbmRzIiwiZXh0ZW5kIiwiaGFuZGxlSWdub3JlIiwiaWdub3JlcyIsImZpbHRlcnMiLCJmb3JFYWNoIiwiaWdub3JlIiwiaW5jbHVkZXMiLCJjb25kaXRpb24iLCJ3aGVuIiwicGF0dGVybiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBY08sTUFBTUEsVUFBZ0MsR0FBRztBQUM1Q0MsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZDLElBQUFBLE1BQU0sRUFBRSxFQUROO0FBRUZDLElBQUFBLEtBQUssRUFBRSxFQUZMO0FBR0ZDLElBQUFBLE9BQU8sRUFBRTtBQUhQLEdBRHNDO0FBTTVDQyxFQUFBQSxTQUFTLEVBQUU7QUFDUEgsSUFBQUEsTUFBTSxFQUFFLEVBREQ7QUFFUEksSUFBQUEsWUFBWSxFQUFFO0FBRlA7QUFOaUMsQ0FBekM7OztBQTJCQSxNQUFNQyxlQUE4RCxHQUN2RUMsT0FEMEUsSUFFekU7QUFDRCxTQUFPQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUYsT0FBZixFQUNGRyxNQURFLENBQ0ssQ0FBQ0MsR0FBRCxFQUFnQixDQUFDQyxHQUFELEVBQU1DLEtBQU4sQ0FBaEIsS0FBaUM7QUFDckMsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFNBQWpCLElBQThCQSxLQUFsQyxFQUF5QyxPQUFPLENBQUMsR0FBR0YsR0FBSixFQUFTQyxHQUFULENBQVA7QUFDekMsUUFBSSxPQUFPQyxLQUFQLEtBQWlCLFFBQXJCLEVBQStCLE9BQU8sQ0FBQyxHQUFJRixHQUFMLEVBQXVCRSxLQUF2QixDQUFQO0FBQy9CLFFBQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixLQUFkLENBQUosRUFBMEIsT0FBTyxDQUFDLEdBQUlGLEdBQUwsRUFBdUIsR0FBR0UsS0FBMUIsQ0FBUDtBQUMxQixXQUFPRixHQUFQO0FBQ0gsR0FORSxFQU1BLEVBTkEsRUFPRkssTUFQRSxDQU9NSCxLQUFELElBQW1CQSxLQUFLLEtBQUssTUFBVixJQUFvQkEsS0FBSyxLQUFLLElBUHRELENBQVA7QUFRSCxDQVhNOzs7O0FBYUEsTUFBTUksU0FHK0QsR0FBRyxDQUMzRUMsVUFEMkUsRUFFM0VDLFVBRjJFLEtBRzFFO0FBQ0QsTUFBSTtBQUNBO0FBQ0EsVUFBTUMsWUFBWSxHQUFHQyxPQUFPLENBQUNDLGNBQUtDLElBQUwsQ0FDekJMLFVBRHlCLEVBRXpCLFNBRnlCLEVBR3pCQyxVQUh5QixFQUl6QixXQUp5QixDQUFELENBQTVCOztBQU9BLFdBQU9DLFlBQVA7QUFDSCxHQVZELENBVUUsT0FBT0ksQ0FBUCxFQUFVO0FBQ1IsV0FBT0MsU0FBUDtBQUNIO0FBQ0osQ0FwQk07Ozs7QUFzQkEsTUFBTUMsWUFLRSxHQUFHLENBQUNDLElBQUQsRUFBT0MsT0FBUCxFQUFnQkMsVUFBaEIsRUFBNEJ0QixPQUE1QixLQUF3QztBQUN0RCxRQUFNdUIsTUFBTSxHQUFHLDJCQUNYSCxJQURXLEVBRVgsR0FBR0MsT0FBTyxDQUFDRyxHQUFSLENBQWFDLE1BQUQsSUFBb0I7QUFDL0IsVUFBTUMsZ0JBQWdCLEdBQUdoQixTQUFTLENBQUNZLFVBQUQsRUFBYUcsTUFBYixDQUFsQzs7QUFDQSxRQUFJQyxnQkFBSixFQUFzQjtBQUNsQixZQUFNQyxhQUFhLEdBQUdELGdCQUFnQixDQUFDRSxNQUFqQixDQUF3QjVCLE9BQXhCLENBQXRCO0FBQ0EsYUFBTzJCLGFBQVA7QUFDSDs7QUFDRCxXQUFPLEVBQVA7QUFDSCxHQVBFLENBRlEsQ0FBZjtBQVlBLFNBQU9KLE1BQVA7QUFDSCxDQW5CTTs7OztBQXFCQSxNQUFNTSxZQUE2QixHQUFHLENBQ3pDQyxPQUR5QyxFQUV6QzlCLE9BRnlDLEVBR3pDeUIsTUFIeUMsS0FJeEM7QUFDRCxRQUFNTSxPQUFvQyxHQUFHLEVBQTdDO0FBRUFELEVBQUFBLE9BQU8sQ0FBQ0UsT0FBUixDQUFpQkMsTUFBRCxJQUFZO0FBQ3hCLFFBQ0ksQ0FBQyxDQUFDQSxNQUFNLENBQUNSLE1BQVQsS0FBb0IsS0FBcEIsSUFDQyxDQUFDLENBQUNRLE1BQU0sQ0FBQ1IsTUFBVCxJQUFtQlEsTUFBTSxDQUFDUixNQUFQLENBQWNTLFFBQWQsQ0FBdUJULE1BQXZCLENBRnhCLEVBR0U7QUFBQTs7QUFDRSxZQUFNVSxTQUFTLG1CQUFHRixNQUFNLENBQUNHLElBQVYsaURBQUcsa0JBQUFILE1BQU0sRUFBUWpDLE9BQVIsQ0FBeEI7O0FBQ0EsVUFBSW1DLFNBQUosRUFBZTtBQUNYRixRQUFBQSxNQUFNLENBQUNJLE9BQVAsQ0FBZUwsT0FBZixDQUF3QkssT0FBRCxJQUFhO0FBQ2hDTixVQUFBQSxPQUFPLENBQUNNLE9BQUQsQ0FBUCxHQUFtQixLQUFuQjtBQUNILFNBRkQ7QUFHSDtBQUNKO0FBQ0osR0FaRDtBQWNBLFNBQU9OLE9BQVA7QUFDSCxDQXRCTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBtZXJnZVdpdGhVbmlvbkFycmF5IH0gZnJvbSBcIkBIZWxwZXJcIjtcblxuaW50ZXJmYWNlIEV4dGVuZFR5cGUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XG4gICAgX2FwcDoge1xuICAgICAgICBpbXBvcnQ6IHN0cmluZ1tdO1xuICAgICAgICBpbm5lcjogc3RyaW5nW107XG4gICAgICAgIHdyYXBwZXI6IFtzdHJpbmcsIHN0cmluZ11bXTtcbiAgICB9O1xuICAgIF9kb2N1bWVudDoge1xuICAgICAgICBpbXBvcnQ6IHN0cmluZ1tdO1xuICAgICAgICBpbml0aWFsUHJvcHM6IHN0cmluZ1tdO1xuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBleHRlbmRCYXNlOiBSZXF1aXJlZDxFeHRlbmRUeXBlPiA9IHtcbiAgICBfYXBwOiB7XG4gICAgICAgIGltcG9ydDogW10sXG4gICAgICAgIGlubmVyOiBbXSxcbiAgICAgICAgd3JhcHBlcjogW10sXG4gICAgfSxcbiAgICBfZG9jdW1lbnQ6IHtcbiAgICAgICAgaW1wb3J0OiBbXSxcbiAgICAgICAgaW5pdGlhbFByb3BzOiBbXSxcbiAgICB9LFxufTtcblxudHlwZSBBbnN3ZXIgPSBzdHJpbmcgfCBzdHJpbmdbXSB8IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG50eXBlIEFuc3dlcnNUeXBlID0gUmVjb3JkPHN0cmluZywgQW5zd2VyPjtcblxudHlwZSBJZ25vcmVUeXBlID0ge1xuICAgIHBsdWdpbj86IHN0cmluZ1tdO1xuICAgIHdoZW46IChhbnN3ZXJzOiBSZWNvcmQ8c3RyaW5nLCBBbnN3ZXI+KSA9PiBib29sZWFuO1xuICAgIHBhdHRlcm46IHN0cmluZ1tdO1xufTtcblxudHlwZSBJZ25vcmVIYW5kbGVyRm4gPSAoXG4gICAgaWdub3JlczogSWdub3JlVHlwZVtdLFxuICAgIGFuc3dlcnM6IEFuc3dlcnNUeXBlLFxuICAgIHBsdWdpbjogc3RyaW5nLFxuKSA9PiBSZWNvcmQ8c3RyaW5nLCBmYWxzZT47XG5cbmV4cG9ydCBjb25zdCBnZXRQbHVnaW5zQXJyYXk6IChhbnN3ZXJzOiBSZWNvcmQ8c3RyaW5nLCBBbnN3ZXI+KSA9PiBzdHJpbmdbXSA9IChcbiAgICBhbnN3ZXJzLFxuKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGFuc3dlcnMpXG4gICAgICAgIC5yZWR1Y2UoKGFjYzogc3RyaW5nW10sIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgJiYgdmFsdWUpIHJldHVybiBbLi4uYWNjLCBrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIFsuLi4oYWNjIGFzIHN0cmluZ1tdKSwgdmFsdWVdO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gWy4uLihhY2MgYXMgc3RyaW5nW10pLCAuLi52YWx1ZV07XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCBbXSlcbiAgICAgICAgLmZpbHRlcigodmFsdWU6IHN0cmluZykgPT4gdmFsdWUgIT09IFwibm9uZVwiICYmIHZhbHVlICE9PSBcIm5vXCIpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEV4dGVuZDogKFxuICAgIHBsdWdpblBhdGg6IHN0cmluZyxcbiAgICBwbHVnaW5OYW1lOiBzdHJpbmcsXG4pID0+IHsgZXh0ZW5kOiAoYW5zd2VyczogUmVjb3JkPHN0cmluZywgQW5zd2VyPikgPT4gRXh0ZW5kVHlwZSB9IHwgdW5kZWZpbmVkID0gKFxuICAgIHBsdWdpblBhdGgsXG4gICAgcGx1Z2luTmFtZSxcbikgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gICAgICAgIGNvbnN0IHBsdWdpbkV4dGVuZCA9IHJlcXVpcmUocGF0aC5qb2luKFxuICAgICAgICAgICAgcGx1Z2luUGF0aCxcbiAgICAgICAgICAgIFwicGx1Z2luc1wiLFxuICAgICAgICAgICAgcGx1Z2luTmFtZSxcbiAgICAgICAgICAgIFwiZXh0ZW5kLmpzXCIsXG4gICAgICAgICkpO1xuXG4gICAgICAgIHJldHVybiBwbHVnaW5FeHRlbmQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjb25jYXRFeHRlbmQ6IChcbiAgICBiYXNlOiBFeHRlbmRUeXBlLFxuICAgIHBsdWdpbnM6IHN0cmluZ1tdLFxuICAgIHNvdXJjZVBhdGg6IHN0cmluZyxcbiAgICBhbnN3ZXJzOiBSZWNvcmQ8c3RyaW5nLCBBbnN3ZXI+LFxuKSA9PiBFeHRlbmRUeXBlID0gKGJhc2UsIHBsdWdpbnMsIHNvdXJjZVBhdGgsIGFuc3dlcnMpID0+IHtcbiAgICBjb25zdCBtZXJnZWQgPSBtZXJnZVdpdGhVbmlvbkFycmF5KFxuICAgICAgICBiYXNlLFxuICAgICAgICAuLi5wbHVnaW5zLm1hcCgocGx1Z2luOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbkV4dGVuZEZpbGUgPSBnZXRFeHRlbmQoc291cmNlUGF0aCwgcGx1Z2luKTtcbiAgICAgICAgICAgIGlmIChwbHVnaW5FeHRlbmRGaWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGx1Z2luRXh0ZW5kcyA9IHBsdWdpbkV4dGVuZEZpbGUuZXh0ZW5kKGFuc3dlcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwbHVnaW5FeHRlbmRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9KSxcbiAgICApO1xuXG4gICAgcmV0dXJuIG1lcmdlZCBhcyBFeHRlbmRUeXBlO1xufTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZUlnbm9yZTogSWdub3JlSGFuZGxlckZuID0gKFxuICAgIGlnbm9yZXM6IElnbm9yZVR5cGVbXSxcbiAgICBhbnN3ZXJzLFxuICAgIHBsdWdpbixcbikgPT4ge1xuICAgIGNvbnN0IGZpbHRlcnM6IFJldHVyblR5cGU8SWdub3JlSGFuZGxlckZuPiA9IHt9O1xuXG4gICAgaWdub3Jlcy5mb3JFYWNoKChpZ25vcmUpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgISFpZ25vcmUucGx1Z2luID09PSBmYWxzZSB8fFxuICAgICAgICAgICAgKCEhaWdub3JlLnBsdWdpbiAmJiBpZ25vcmUucGx1Z2luLmluY2x1ZGVzKHBsdWdpbikpXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gaWdub3JlLndoZW4/LihhbnN3ZXJzKTtcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZ25vcmUucGF0dGVybi5mb3JFYWNoKChwYXR0ZXJuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbcGF0dGVybl0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZpbHRlcnM7XG59O1xuIl19