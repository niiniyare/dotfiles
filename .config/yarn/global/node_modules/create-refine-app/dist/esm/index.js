#!/usr/bin/env node
var I=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(i,n)=>(typeof require!="undefined"?require:i)[n]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});import{fileURLToPath as E}from"url";import V from"path";var z=()=>E(import.meta.url),D=()=>V.dirname(z()),a=D();import{Command as ie}from"commander";import ne from"execa";import{readFileSync as oe}from"fs";import p from"ora";import $ from"path";import r from"chalk";import S from"boxen";import c from"execa";import U from"path";import j from"rimraf";function H(e){try{return c.commandSync("git rev-parse --is-inside-work-tree",{stdio:"ignore",cwd:e}),!0}catch{}return!1}function B(e){try{return c.commandSync("hg --cwd . root",{stdio:"ignore",cwd:e}),!0}catch{}return!1}function G(e,i){let n=!1;try{c.commandSync("git --version",{stdio:"ignore",cwd:e})}catch{return"git-not-found"}if(H(e)||B(e))return"already-in-repository";try{c.commandSync("git init",{stdio:"ignore",cwd:e})}catch{return"git-init-failed"}n=!0;try{c.commandSync("git checkout -b main",{stdio:"ignore",cwd:e}),c.commandSync("git add -A",{stdio:"ignore",cwd:e}),c.sync("git",["commit",`--message="${i}"`],{stdio:"ignore",cwd:e})}catch{if(n)try{j.sync(U.join(e,".git"))}catch{}return"git-commit-failed"}return"success"}import R from"fs";async function _(e,i={recursive:!0}){try{return R.existsSync(e)?"already":(await R.promises.mkdir(e,i),"success")}catch{return"failed"}}import M from"got";async function N(e){return(await M.head(e).catch(n=>n)).statusCode===200}async function C({organization:e,repository:i,example:n,branch:t}){return N(`https://api.github.com/repos/${e}/${i}/contents/examples/${encodeURIComponent(n)}?ref=${t}`)}import Y from"got";import J from"tar";import{Stream as q}from"stream";import{promisify as L}from"util";import{join as W}from"path";import{createWriteStream as X,promises as y}from"fs";var K=L(q.pipeline),Q=".refine-example.temp";async function Z(e){let i=W(process.cwd(),`${Q}-${Date.now()}`);try{return await K(Y.stream(e),X(i)),i}catch{try{await y.unlink(i)}catch{}return}}async function P({root:e,name:i,branch:n,repo:t,org:s}){let d=await Z(`https://codeload.github.com/${s}/${t}/tar.gz/${n}`);if(!d)return"download-failed";try{await J.x({file:d,cwd:e,strip:3,filter:o=>!!o.includes(`${t}-${n}/examples/${i}/`)})}catch{try{await y.unlink(d)}catch{}return"extract-failed"}try{await y.unlink(d)}catch{}return"success"}import ee from"execa";import te from"which-pm-runs";function w(){try{let{name:e}=te()||{};return e!=null?e:"npm"}catch{return"npm"}}async function A(e){try{return await ee(w(),["install"],{cwd:e,stdio:"ignore"}),!0}catch{return!1}}var h="refinedev",x="refine",b="master";var re=async(e,i)=>{let n=w();typeof e!="string"&&(p("You must specify an example name").fail(),console.log(S([r`You can find {bold refine} examples at:`,"",r`{dim.cyan github.com/}{cyan refinedev/refine/tree/master/examples}`].join(`
`),{title:r`No example provided`,titleAlignment:"center",borderStyle:"round",borderColor:"gray",padding:1,textAlignment:"center",margin:1,float:"center"})),process.exit(1));let t=$.resolve(i||e),s=p("Checking if example exists in refine").start();await C({organization:h,repository:x,example:e,branch:b})?s.succeed("Example found in refine repository"):(s.fail(`Could not locate an example named ${r.red(`"${e}"`)}`),console.log(S([r`You can find {bold refine} examples at:`,"",r`{dim.cyan github.com/}{cyan refinedev/refine/tree/master/examples}`].join(`
`),{title:r`Example not found`,titleAlignment:"center",borderStyle:"round",borderColor:"gray",padding:1,textAlignment:"center",margin:1,float:"center"})),process.exit(1));let o=t.includes($.resolve(process.cwd()))?t.replace($.resolve(process.cwd()),"."):t,f=p(`Creating directory ${r.cyan(o)}.`).start(),k=await _(t);k==="already"?f.warn(`Directory ${r.cyan(o)} already exists. Files will be overwritten.`):k==="failed"?(f.fail(`Failed to create directory ${r.cyan(o)}.`),process.exit(1)):f.succeed(`Directory ${r.cyan(o)} created.`);let g=p(`Downloading files for example ${r.cyan(e)}. This might take a moment.`).start(),O=await P({root:t,name:e,branch:b,repo:x,org:h});O==="download-failed"&&(g.fail(`Failed to download files for example ${r.cyan(e)}.`),process.exit(1)),O==="extract-failed"&&(g.fail(`Failed to extract files for example ${r.cyan(e)}.`),process.exit(1)),g.succeed(`Files downloaded and extracted for example ${r.cyan(e)}.`);let v=p("Installing packages. This might take a couple of minutes.").start();await A(t)?v.succeed("Packages installed successfully."):v.fail("Failed to install packages. You can try again manually.");let u=p(`Initializing Git in ${r.cyan(o)}.`).start(),m=G(t,"Initial commit from Create Refine App");m==="git-not-found"&&u.warn("Git was not found in your PATH. Skipping Git initialization."),m==="already-in-repository"&&u.warn(`Directory ${r.cyan(o)} is already a Git repository. Skipping Git initialization.`),m==="git-init-failed"&&u.warn(`Failed to initialize Git repository in ${r.cyan(o)}.`),m==="git-commit-failed"&&u.warn(`Failed to commit initial commit to Git repository in ${r.cyan(o)}.`),m==="success"&&u.succeed("Created Git repository with initial commit.");let T=n==="yarn"?"":"run ";console.log(S([r`Created {cyan ${e}} at {cyan ${o}}`,"",r`Start using your new {bold refine} app by running:`,"",r`  {bold cd} {cyan ${o}}`,r`  {bold ${n} ${T}}{cyan start}`].join(`
`),{title:r`{bold.green Success!}`,titleAlignment:"center",borderStyle:"round",padding:1,float:"center",margin:1,borderColor:"gray"}))},F=re;var ae=()=>{let e=JSON.parse(oe(`${a}/../package.json`,"utf8")),i=new ie;i.version(e.version,"-v, --version","Output the current version.").usage("<command> [options]").helpOption("-h, --help","Output usage information.").option("-s, --source <source-path>","specify a custom source of plugins").option("-b, --branch <source-git-branch>","specify a custom branch in source of plugins").option("-o, --preset <preset-name>","specify a preset to use for the project").option("-l, --lucky","use this option to generate a project with random answers").option("-e, --example <example> [destination]","get a clone of an example from the refine repository").option("-d, --download <download>","specify a download type (zip | git) of source","zip").allowUnknownOption(!0).allowExcessArguments(!0).action((n,t)=>{try{if(t.getOptionValue("example")){F(t.getOptionValue("example"),t.args[0]);return}let s=I.resolve(".bin/superplate");ne.sync(s,[...t.args,"--project=refine","--download=zip",t.getOptionValue("source")?"--source="+t.getOptionValue("source"):"",t.getOptionValue("branch")?"--branch="+t.getOptionValue("branch"):"",t.getOptionValue("preset")?"--preset="+t.getOptionValue("preset"):"",t.getOptionValue("lucky")?"--lucky":"",t.getOptionValue("download")?"--download="+t.getOptionValue("download"):""],{stdio:"inherit"})}catch{}}),i.parse(process.argv)};ae();
//# sourceMappingURL=index.js.map