#!/usr/bin/env node
(()=>{var W=Object.create;var G=Object.defineProperty;var X=Object.getOwnPropertyDescriptor;var K=Object.getOwnPropertyNames;var L=Object.getPrototypeOf,Q=Object.prototype.hasOwnProperty;var o=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(r,n)=>(typeof require!="undefined"?require:r)[n]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var Z=(e,r,n,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let a of K(r))!Q.call(e,a)&&a!==n&&G(e,a,{get:()=>r[a],enumerable:!(t=X(r,a))||t.enumerable});return e};var c=(e,r,n)=>(n=e!=null?W(L(e)):{},Z(r||!e||!e.__esModule?G(n,"default",{value:e,enumerable:!0}):n,e));var N=o("commander"),Y=c(o("execa")),J=o("fs");var p=c(o("ora")),y=c(o("path")),i=c(o("chalk")),w=c(o("boxen"));var l=c(o("execa")),C=c(o("path")),R=c(o("rimraf"));function ee(e){try{return l.default.commandSync("git rev-parse --is-inside-work-tree",{stdio:"ignore",cwd:e}),!0}catch{}return!1}function te(e){try{return l.default.commandSync("hg --cwd . root",{stdio:"ignore",cwd:e}),!0}catch{}return!1}function _(e,r){let n=!1;try{l.default.commandSync("git --version",{stdio:"ignore",cwd:e})}catch{return"git-not-found"}if(ee(e)||te(e))return"already-in-repository";try{l.default.commandSync("git init",{stdio:"ignore",cwd:e})}catch{return"git-init-failed"}n=!0;try{l.default.commandSync("git checkout -b main",{stdio:"ignore",cwd:e}),l.default.commandSync("git add -A",{stdio:"ignore",cwd:e}),l.default.sync("git",["commit",`--message="${r}"`],{stdio:"ignore",cwd:e})}catch{if(n)try{R.default.sync(C.default.join(e,".git"))}catch{}return"git-commit-failed"}return"success"}var x=c(o("fs"));async function A(e,r={recursive:!0}){try{return x.default.existsSync(e)?"already":(await x.default.promises.mkdir(e,r),"success")}catch{return"failed"}}var P=c(o("got"));async function re(e){return(await P.default.head(e).catch(n=>n)).statusCode===200}async function F({organization:e,repository:r,example:n,branch:t}){return re(`https://api.github.com/repos/${e}/${r}/contents/examples/${encodeURIComponent(n)}?ref=${t}`)}var E=c(o("got")),T=c(o("tar")),V=o("stream"),z=o("util"),j=o("path"),d=o("fs"),ie=(0,z.promisify)(V.Stream.pipeline),ne=".refine-example.temp";async function oe(e){let r=(0,j.join)(process.cwd(),`${ne}-${Date.now()}`);try{return await ie(E.default.stream(e),(0,d.createWriteStream)(r)),r}catch{try{await d.promises.unlink(r)}catch{}return}}async function D({root:e,name:r,branch:n,repo:t,org:a}){let u=await oe(`https://codeload.github.com/${a}/${t}/tar.gz/${n}`);if(!u)return"download-failed";try{await T.default.x({file:u,cwd:e,strip:3,filter:s=>!!s.includes(`${t}-${n}/examples/${r}/`)})}catch{try{await d.promises.unlink(u)}catch{}return"extract-failed"}try{await d.promises.unlink(u)}catch{}return"success"}var H=c(o("execa")),U=c(o("which-pm-runs"));function b(){try{let{name:e}=(0,U.default)()||{};return e!=null?e:"npm"}catch{return"npm"}}async function B(e){try{return await(0,H.default)(b(),["install"],{cwd:e,stdio:"ignore"}),!0}catch{return!1}}var $="refinedev",S="refine",k="master";var ae=async(e,r)=>{let n=b();typeof e!="string"&&((0,p.default)("You must specify an example name").fail(),console.log((0,w.default)([i.default`You can find {bold refine} examples at:`,"",i.default`{dim.cyan github.com/}{cyan refinedev/refine/tree/master/examples}`].join(`
`),{title:i.default`No example provided`,titleAlignment:"center",borderStyle:"round",borderColor:"gray",padding:1,textAlignment:"center",margin:1,float:"center"})),process.exit(1));let t=y.default.resolve(r||e),a=(0,p.default)("Checking if example exists in refine").start();await F({organization:$,repository:S,example:e,branch:k})?a.succeed("Example found in refine repository"):(a.fail(`Could not locate an example named ${i.default.red(`"${e}"`)}`),console.log((0,w.default)([i.default`You can find {bold refine} examples at:`,"",i.default`{dim.cyan github.com/}{cyan refinedev/refine/tree/master/examples}`].join(`
`),{title:i.default`Example not found`,titleAlignment:"center",borderStyle:"round",borderColor:"gray",padding:1,textAlignment:"center",margin:1,float:"center"})),process.exit(1));let s=t.includes(y.default.resolve(process.cwd()))?t.replace(y.default.resolve(process.cwd()),"."):t,g=(0,p.default)(`Creating directory ${i.default.cyan(s)}.`).start(),O=await A(t);O==="already"?g.warn(`Directory ${i.default.cyan(s)} already exists. Files will be overwritten.`):O==="failed"?(g.fail(`Failed to create directory ${i.default.cyan(s)}.`),process.exit(1)):g.succeed(`Directory ${i.default.cyan(s)} created.`);let h=(0,p.default)(`Downloading files for example ${i.default.cyan(e)}. This might take a moment.`).start(),v=await D({root:t,name:e,branch:k,repo:S,org:$});v==="download-failed"&&(h.fail(`Failed to download files for example ${i.default.cyan(e)}.`),process.exit(1)),v==="extract-failed"&&(h.fail(`Failed to extract files for example ${i.default.cyan(e)}.`),process.exit(1)),h.succeed(`Files downloaded and extracted for example ${i.default.cyan(e)}.`);let I=(0,p.default)("Installing packages. This might take a couple of minutes.").start();await B(t)?I.succeed("Packages installed successfully."):I.fail("Failed to install packages. You can try again manually.");let f=(0,p.default)(`Initializing Git in ${i.default.cyan(s)}.`).start(),m=_(t,"Initial commit from Create Refine App");m==="git-not-found"&&f.warn("Git was not found in your PATH. Skipping Git initialization."),m==="already-in-repository"&&f.warn(`Directory ${i.default.cyan(s)} is already a Git repository. Skipping Git initialization.`),m==="git-init-failed"&&f.warn(`Failed to initialize Git repository in ${i.default.cyan(s)}.`),m==="git-commit-failed"&&f.warn(`Failed to commit initial commit to Git repository in ${i.default.cyan(s)}.`),m==="success"&&f.succeed("Created Git repository with initial commit.");let q=n==="yarn"?"":"run ";console.log((0,w.default)([i.default`Created {cyan ${e}} at {cyan ${s}}`,"",i.default`Start using your new {bold refine} app by running:`,"",i.default`  {bold cd} {cyan ${s}}`,i.default`  {bold ${n} ${q}}{cyan start}`].join(`
`),{title:i.default`{bold.green Success!}`,titleAlignment:"center",borderStyle:"round",padding:1,float:"center",margin:1,borderColor:"gray"}))},M=ae;var se=()=>{let e=JSON.parse((0,J.readFileSync)(`${__dirname}/../package.json`,"utf8")),r=new N.Command;r.version(e.version,"-v, --version","Output the current version.").usage("<command> [options]").helpOption("-h, --help","Output usage information.").option("-s, --source <source-path>","specify a custom source of plugins").option("-b, --branch <source-git-branch>","specify a custom branch in source of plugins").option("-o, --preset <preset-name>","specify a preset to use for the project").option("-l, --lucky","use this option to generate a project with random answers").option("-e, --example <example> [destination]","get a clone of an example from the refine repository").option("-d, --download <download>","specify a download type (zip | git) of source","zip").allowUnknownOption(!0).allowExcessArguments(!0).action((n,t)=>{try{if(t.getOptionValue("example")){M(t.getOptionValue("example"),t.args[0]);return}let a=o.resolve(".bin/superplate");Y.default.sync(a,[...t.args,"--project=refine","--download=zip",t.getOptionValue("source")?"--source="+t.getOptionValue("source"):"",t.getOptionValue("branch")?"--branch="+t.getOptionValue("branch"):"",t.getOptionValue("preset")?"--preset="+t.getOptionValue("preset"):"",t.getOptionValue("lucky")?"--lucky":"",t.getOptionValue("download")?"--download="+t.getOptionValue("download"):""],{stdio:"inherit"})}catch{}}),r.parse(process.argv)};se();})();
//# sourceMappingURL=index.js.map