"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DownloadHelper = void 0;

var _temp = require("temp");

var _got = _interopRequireDefault(require("got"));

var _tar = _interopRequireDefault(require("tar"));

var _fs = require("fs");

var _stream = require("stream");

var _parseGithubUrl = _interopRequireDefault(require("parse-github-url"));

var _util = require("util");

var _path = require("path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const pipeline = (0, _util.promisify)(_stream.Stream.pipeline);
const TEMP_PREFIX = "superplate-core-plugins.temp";
const DownloadHelper = {
  DownloadAndGetPath: async path => {
    try {
      const tempFolder = (0, _temp.mkdirSync)({
        dir: process.cwd(),
        prefix: "."
      });
      const tempFile = (0, _path.join)(tempFolder, `${TEMP_PREFIX}-${Date.now()}`);
      const {
        owner,
        name,
        branch
      } = (0, _parseGithubUrl.default)(path);
      const url = `https://codeload.github.com/${owner}/${name}/tar.gz/${branch}`;
      await pipeline(_got.default.stream(url), (0, _fs.createWriteStream)(tempFile));
      await _tar.default.x({
        file: tempFile,
        cwd: tempFolder,
        strip: 1
      });
      return tempFolder;
    } catch (e) {
      throw new Error(e instanceof Error ? e.message : e);
    }
  }
};
exports.DownloadHelper = DownloadHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9IZWxwZXIvZG93bmxvYWQvaW5kZXgudHMiXSwibmFtZXMiOlsicGlwZWxpbmUiLCJTdHJlYW0iLCJURU1QX1BSRUZJWCIsIkRvd25sb2FkSGVscGVyIiwiRG93bmxvYWRBbmRHZXRQYXRoIiwicGF0aCIsInRlbXBGb2xkZXIiLCJkaXIiLCJwcm9jZXNzIiwiY3dkIiwicHJlZml4IiwidGVtcEZpbGUiLCJEYXRlIiwibm93Iiwib3duZXIiLCJuYW1lIiwiYnJhbmNoIiwidXJsIiwiZ290Iiwic3RyZWFtIiwidGFyIiwieCIsImZpbGUiLCJzdHJpcCIsImUiLCJFcnJvciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVBLE1BQU1BLFFBQVEsR0FBRyxxQkFBVUMsZUFBT0QsUUFBakIsQ0FBakI7QUFDQSxNQUFNRSxXQUFXLEdBQUcsOEJBQXBCO0FBRU8sTUFBTUMsY0FBYyxHQUFHO0FBQzFCQyxFQUFBQSxrQkFBa0IsRUFBRSxNQUFPQyxJQUFQLElBQXlDO0FBQ3pELFFBQUk7QUFDQSxZQUFNQyxVQUFVLEdBQUcscUJBQVU7QUFDekJDLFFBQUFBLEdBQUcsRUFBRUMsT0FBTyxDQUFDQyxHQUFSLEVBRG9CO0FBRXpCQyxRQUFBQSxNQUFNLEVBQUU7QUFGaUIsT0FBVixDQUFuQjtBQUlBLFlBQU1DLFFBQVEsR0FBRyxnQkFBS0wsVUFBTCxFQUFrQixHQUFFSixXQUFZLElBQUdVLElBQUksQ0FBQ0MsR0FBTCxFQUFXLEVBQTlDLENBQWpCO0FBRUEsWUFBTTtBQUFFQyxRQUFBQSxLQUFGO0FBQVNDLFFBQUFBLElBQVQ7QUFBZUMsUUFBQUE7QUFBZixVQUEwQiw2QkFBZ0JYLElBQWhCLENBQWhDO0FBQ0EsWUFBTVksR0FBRyxHQUFJLCtCQUE4QkgsS0FBTSxJQUFHQyxJQUFLLFdBQVVDLE1BQU8sRUFBMUU7QUFDQSxZQUFNaEIsUUFBUSxDQUFDa0IsYUFBSUMsTUFBSixDQUFXRixHQUFYLENBQUQsRUFBa0IsMkJBQWtCTixRQUFsQixDQUFsQixDQUFkO0FBRUEsWUFBTVMsYUFBSUMsQ0FBSixDQUFNO0FBQ1JDLFFBQUFBLElBQUksRUFBRVgsUUFERTtBQUVSRixRQUFBQSxHQUFHLEVBQUVILFVBRkc7QUFHUmlCLFFBQUFBLEtBQUssRUFBRTtBQUhDLE9BQU4sQ0FBTjtBQU1BLGFBQU9qQixVQUFQO0FBQ0gsS0FsQkQsQ0FrQkUsT0FBT2tCLENBQVAsRUFBVTtBQUNSLFlBQU0sSUFBSUMsS0FBSixDQUFVRCxDQUFDLFlBQVlDLEtBQWIsR0FBcUJELENBQUMsQ0FBQ0UsT0FBdkIsR0FBa0NGLENBQTVDLENBQU47QUFDSDtBQUNKO0FBdkJ5QixDQUF2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1rZGlyU3luYyB9IGZyb20gXCJ0ZW1wXCI7XG5pbXBvcnQgZ290IGZyb20gXCJnb3RcIjtcbmltcG9ydCB0YXIgZnJvbSBcInRhclwiO1xuaW1wb3J0IHsgY3JlYXRlV3JpdGVTdHJlYW0gfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCJzdHJlYW1cIjtcbmltcG9ydCBnaXRIdWJVUkxQYXJzZXIgZnJvbSBcInBhcnNlLWdpdGh1Yi11cmxcIjtcblxuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcInV0aWxcIjtcbmltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiO1xuXG5jb25zdCBwaXBlbGluZSA9IHByb21pc2lmeShTdHJlYW0ucGlwZWxpbmUpO1xuY29uc3QgVEVNUF9QUkVGSVggPSBcInN1cGVycGxhdGUtY29yZS1wbHVnaW5zLnRlbXBcIjtcblxuZXhwb3J0IGNvbnN0IERvd25sb2FkSGVscGVyID0ge1xuICAgIERvd25sb2FkQW5kR2V0UGF0aDogYXN5bmMgKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wRm9sZGVyID0gbWtkaXJTeW5jKHtcbiAgICAgICAgICAgICAgICBkaXI6IHByb2Nlc3MuY3dkKCksXG4gICAgICAgICAgICAgICAgcHJlZml4OiBcIi5cIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdGVtcEZpbGUgPSBqb2luKHRlbXBGb2xkZXIsIGAke1RFTVBfUFJFRklYfS0ke0RhdGUubm93KCl9YCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgb3duZXIsIG5hbWUsIGJyYW5jaCB9ID0gZ2l0SHViVVJMUGFyc2VyKHBhdGgpO1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vY29kZWxvYWQuZ2l0aHViLmNvbS8ke293bmVyfS8ke25hbWV9L3Rhci5nei8ke2JyYW5jaH1gO1xuICAgICAgICAgICAgYXdhaXQgcGlwZWxpbmUoZ290LnN0cmVhbSh1cmwpLCBjcmVhdGVXcml0ZVN0cmVhbSh0ZW1wRmlsZSkpO1xuXG4gICAgICAgICAgICBhd2FpdCB0YXIueCh7XG4gICAgICAgICAgICAgICAgZmlsZTogdGVtcEZpbGUsXG4gICAgICAgICAgICAgICAgY3dkOiB0ZW1wRm9sZGVyLFxuICAgICAgICAgICAgICAgIHN0cmlwOiAxLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0ZW1wRm9sZGVyO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSBpbnN0YW5jZW9mIEVycm9yID8gZS5tZXNzYWdlIDogKGUgYXMgc3RyaW5nKSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbiJdfQ==