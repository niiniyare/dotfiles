"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tips = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const indent = (indent = 1, tabWidth = 2) => {
  return "".padStart(indent * tabWidth);
};

const preInstall = () => undefined;

const postInstall = ({
  name,
  dir,
  pm
}) => {
  console.log("");
  console.log(`${_chalk.default.green.bold("Success!")} Created ${_chalk.default.greenBright.bold(name)} at ${_chalk.default.bold(dir)}`);
  console.log("");
  console.log("You can run several commands:");
  console.log("");
  console.log(`${indent()}${_chalk.default.blueBright(pm === "yarn" || pm === "pnpm" ? `${pm} dev` : "npm run dev")}`);
  console.log(`${indent(2)}Starts the development server.`);
  console.log("");
  console.log(`${indent()}${_chalk.default.blueBright(pm === "yarn" || pm === "pnpm" ? `${pm} build` : "npm run build")}`);
  console.log(`${indent(2)}Bundles the app for production.`);
  console.log("");
  console.log(`${indent()}${_chalk.default.blueBright(pm === "yarn" || pm === "pnpm" ? `${pm} start` : "npm run start")}`);
  console.log(`${indent(2)}Starts the production server.`);
  console.log("");
  console.log("Start developing by typing:\n");
  console.log(`${indent()}${_chalk.default.blueBright("cd")} ${name}`);
  console.log(`${indent()}${_chalk.default.blueBright(pm === "yarn" || pm === "pnpm" ? `${pm} dev` : "npm run dev")}`);
  console.log("");
};

const tips = {
  preInstall,
  postInstall
};
exports.tips = tips;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9IZWxwZXIvdGlwcy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbmRlbnQiLCJ0YWJXaWR0aCIsInBhZFN0YXJ0IiwicHJlSW5zdGFsbCIsInVuZGVmaW5lZCIsInBvc3RJbnN0YWxsIiwibmFtZSIsImRpciIsInBtIiwiY29uc29sZSIsImxvZyIsImNoYWxrIiwiZ3JlZW4iLCJib2xkIiwiZ3JlZW5CcmlnaHQiLCJibHVlQnJpZ2h0IiwidGlwcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHLENBQUNBLE1BQU0sR0FBRyxDQUFWLEVBQWFDLFFBQVEsR0FBRyxDQUF4QixLQUE4QjtBQUN6QyxTQUFPLEdBQUdDLFFBQUgsQ0FBWUYsTUFBTSxHQUFHQyxRQUFyQixDQUFQO0FBQ0gsQ0FGRDs7QUFJQSxNQUFNRSxVQUFVLEdBQUcsTUFBWUMsU0FBL0I7O0FBUUEsTUFBTUMsV0FBMEIsR0FBRyxDQUFDO0FBQUVDLEVBQUFBLElBQUY7QUFBUUMsRUFBQUEsR0FBUjtBQUFhQyxFQUFBQTtBQUFiLENBQUQsS0FBdUI7QUFDdERDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEVBQVo7QUFFQUQsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0ssR0FBRUMsZUFBTUMsS0FBTixDQUFZQyxJQUFaLENBQWlCLFVBQWpCLENBQTZCLFlBQVdGLGVBQU1HLFdBQU4sQ0FBa0JELElBQWxCLENBQ3ZDUCxJQUR1QyxDQUV6QyxPQUFNSyxlQUFNRSxJQUFOLENBQVdOLEdBQVgsQ0FBZ0IsRUFINUI7QUFLQUUsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksRUFBWjtBQUNBRCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSwrQkFBWjtBQUNBRCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxFQUFaO0FBRUFELEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNLLEdBQUVWLE1BQU0sRUFBRyxHQUFFVyxlQUFNSSxVQUFOLENBQ1ZQLEVBQUUsS0FBSyxNQUFQLElBQWlCQSxFQUFFLEtBQUssTUFBeEIsR0FBa0MsR0FBRUEsRUFBRyxNQUF2QyxHQUErQyxhQURyQyxDQUVaLEVBSE47QUFLQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsR0FBRVYsTUFBTSxDQUFDLENBQUQsQ0FBSSxnQ0FBekI7QUFDQVMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksRUFBWjtBQUNBRCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FDSyxHQUFFVixNQUFNLEVBQUcsR0FBRVcsZUFBTUksVUFBTixDQUNWUCxFQUFFLEtBQUssTUFBUCxJQUFpQkEsRUFBRSxLQUFLLE1BQXhCLEdBQWtDLEdBQUVBLEVBQUcsUUFBdkMsR0FBaUQsZUFEdkMsQ0FFWixFQUhOO0FBS0FDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLEdBQUVWLE1BQU0sQ0FBQyxDQUFELENBQUksaUNBQXpCO0FBQ0FTLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEVBQVo7QUFDQUQsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0ssR0FBRVYsTUFBTSxFQUFHLEdBQUVXLGVBQU1JLFVBQU4sQ0FDVlAsRUFBRSxLQUFLLE1BQVAsSUFBaUJBLEVBQUUsS0FBSyxNQUF4QixHQUFrQyxHQUFFQSxFQUFHLFFBQXZDLEdBQWlELGVBRHZDLENBRVosRUFITjtBQUtBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxHQUFFVixNQUFNLENBQUMsQ0FBRCxDQUFJLCtCQUF6QjtBQUNBUyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxFQUFaO0FBQ0FELEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLCtCQUFaO0FBQ0FELEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLEdBQUVWLE1BQU0sRUFBRyxHQUFFVyxlQUFNSSxVQUFOLENBQWlCLElBQWpCLENBQXVCLElBQUdULElBQUssRUFBekQ7QUFDQUcsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQ0ssR0FBRVYsTUFBTSxFQUFHLEdBQUVXLGVBQU1JLFVBQU4sQ0FDVlAsRUFBRSxLQUFLLE1BQVAsSUFBaUJBLEVBQUUsS0FBSyxNQUF4QixHQUFrQyxHQUFFQSxFQUFHLE1BQXZDLEdBQStDLGFBRHJDLENBRVosRUFITjtBQUtBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxFQUFaO0FBQ0gsQ0F6Q0Q7O0FBMkNPLE1BQU1NLElBQUksR0FBRztBQUNoQmIsRUFBQUEsVUFEZ0I7QUFFaEJFLEVBQUFBO0FBRmdCLENBQWIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XG5cbmNvbnN0IGluZGVudCA9IChpbmRlbnQgPSAxLCB0YWJXaWR0aCA9IDIpID0+IHtcbiAgICByZXR1cm4gXCJcIi5wYWRTdGFydChpbmRlbnQgKiB0YWJXaWR0aCk7XG59O1xuXG5jb25zdCBwcmVJbnN0YWxsID0gKCk6IHZvaWQgPT4gdW5kZWZpbmVkO1xuXG50eXBlIFBvc3RJbnN0YWxsRm4gPSAob3B0czoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkaXI6IHN0cmluZztcbiAgICBwbTogXCJ5YXJuXCIgfCBcIm5wbVwiIHwgXCJwbnBtXCI7XG59KSA9PiB2b2lkO1xuXG5jb25zdCBwb3N0SW5zdGFsbDogUG9zdEluc3RhbGxGbiA9ICh7IG5hbWUsIGRpciwgcG0gfSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICAgIGAke2NoYWxrLmdyZWVuLmJvbGQoXCJTdWNjZXNzIVwiKX0gQ3JlYXRlZCAke2NoYWxrLmdyZWVuQnJpZ2h0LmJvbGQoXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICApfSBhdCAke2NoYWxrLmJvbGQoZGlyKX1gLFxuICAgICk7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJZb3UgY2FuIHJ1biBzZXZlcmFsIGNvbW1hbmRzOlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgJHtpbmRlbnQoKX0ke2NoYWxrLmJsdWVCcmlnaHQoXG4gICAgICAgICAgICBwbSA9PT0gXCJ5YXJuXCIgfHwgcG0gPT09IFwicG5wbVwiID8gYCR7cG19IGRldmAgOiBcIm5wbSBydW4gZGV2XCIsXG4gICAgICAgICl9YCxcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKGAke2luZGVudCgyKX1TdGFydHMgdGhlIGRldmVsb3BtZW50IHNlcnZlci5gKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYCR7aW5kZW50KCl9JHtjaGFsay5ibHVlQnJpZ2h0KFxuICAgICAgICAgICAgcG0gPT09IFwieWFyblwiIHx8IHBtID09PSBcInBucG1cIiA/IGAke3BtfSBidWlsZGAgOiBcIm5wbSBydW4gYnVpbGRcIixcbiAgICAgICAgKX1gLFxuICAgICk7XG4gICAgY29uc29sZS5sb2coYCR7aW5kZW50KDIpfUJ1bmRsZXMgdGhlIGFwcCBmb3IgcHJvZHVjdGlvbi5gKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYCR7aW5kZW50KCl9JHtjaGFsay5ibHVlQnJpZ2h0KFxuICAgICAgICAgICAgcG0gPT09IFwieWFyblwiIHx8IHBtID09PSBcInBucG1cIiA/IGAke3BtfSBzdGFydGAgOiBcIm5wbSBydW4gc3RhcnRcIixcbiAgICAgICAgKX1gLFxuICAgICk7XG4gICAgY29uc29sZS5sb2coYCR7aW5kZW50KDIpfVN0YXJ0cyB0aGUgcHJvZHVjdGlvbiBzZXJ2ZXIuYCk7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJTdGFydCBkZXZlbG9waW5nIGJ5IHR5cGluZzpcXG5cIik7XG4gICAgY29uc29sZS5sb2coYCR7aW5kZW50KCl9JHtjaGFsay5ibHVlQnJpZ2h0KFwiY2RcIil9ICR7bmFtZX1gKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYCR7aW5kZW50KCl9JHtjaGFsay5ibHVlQnJpZ2h0KFxuICAgICAgICAgICAgcG0gPT09IFwieWFyblwiIHx8IHBtID09PSBcInBucG1cIiA/IGAke3BtfSBkZXZgIDogXCJucG0gcnVuIGRldlwiLFxuICAgICAgICApfWAsXG4gICAgKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0aXBzID0ge1xuICAgIHByZUluc3RhbGwsXG4gICAgcG9zdEluc3RhbGwsXG59O1xuIl19