"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prompt_project_types = exports.get_project_types = exports.is_multi_type = exports.get_source = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _chalk = _interopRequireDefault(require("chalk"));

var _enquirer = require("enquirer");

var _ = require("./..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * get_source will return path for plugins
 * source can be url - relative local path or "superplate"
 *
 */
const get_source = async (source, branch, downloadType) => {
  /**
   * Replace path if default
   */
  const sourceSpinner = (0, _ora.default)(`Checking provided source ${_chalk.default.bold`"${source}${branch ? ` - ${branch}` : ""}"`}`);
  sourceSpinner.start();
  const sourcePath = source !== null && source !== void 0 ? source : "https://github.com/pankod/superplate-core-plugins.git";
  const isPathExists = await _.FSHelper.IsPathExists(sourcePath);

  if (isPathExists) {
    /**
     * check local path
     */
    sourceSpinner.succeed("Found local source.");
    return {
      path: sourcePath
    };
  } else if (downloadType === "zip") {
    sourceSpinner.text = "Checking remote source...";
    sourceSpinner.text = "Remote source found. Downloading...";

    try {
      const cloneResponse = await _.DownloadHelper.DownloadAndGetPath(sourcePath);

      if (cloneResponse) {
        sourceSpinner.succeed("Downloaded remote source successfully.");
        return {
          path: cloneResponse
        };
      }

      sourceSpinner.fail("Could not retrieve source repository.");
      return {
        error: "Could not retrieve source repository."
      };
    } catch (e) {
      sourceSpinner.fail("Could not retrieve source repository.");
      sourceSpinner.text = "Try to use git instead of zip...";
      return {
        error: "Could not retrieve source repository."
      };
    }
  } else {
    /**
     * Check repo exists
     * clone and return path if exists
     */
    sourceSpinner.text = "Checking remote source...";
    const repoStatus = await _.GitHelper.IsRepoExist(sourcePath);

    if (repoStatus.exists === true) {
      sourceSpinner.text = "Remote source found. Cloning...";

      try {
        const cloneResponse = await _.GitHelper.CloneAndGetPath(sourcePath, branch);

        if (cloneResponse) {
          sourceSpinner.succeed("Cloned remote source successfully.");
          return {
            path: cloneResponse
          };
        }

        sourceSpinner.fail("Could not retrieve source repository.");
        return {
          error: "Could not retrieve source repository."
        };
      } catch (e) {
        `${e}`;
        sourceSpinner.fail("Could not retrieve source repository.");
        return {
          error: "Could not retrieve source repository."
        };
      }
    } else {
      sourceSpinner.fail("Could not found source repository.");
      return {
        error: repoStatus.error
      };
    }
  }
};

exports.get_source = get_source;

const is_multi_type = async (source) => {
  if (source) {
    const checkRootPrompt = await _.FSHelper.IsPathExists(`${source}/prompt.js`);
    return !checkRootPrompt;
  }

  return false;
};

exports.is_multi_type = is_multi_type;

const get_project_types = async source => {
  const projectTypes = []; // get project types => react,nextjs,refine ...etc

  const files = await _.FSHelper.ReadDir(source);

  for (const file of files) {
    const existPromptFile = await _.FSHelper.IsPathExists(`${source}/${file}/prompt.js`);

    if (existPromptFile) {
      projectTypes.push({
        title: file,
        value: file
      });
    }
  }

  return projectTypes;
};

exports.get_project_types = get_project_types;

const prompt_project_types = async (source, types, typeFromArgs) => {
  let projectType = "";

  if (types.find(p => p.title === typeFromArgs) && typeof typeFromArgs === "string") {
    projectType = typeFromArgs;
  } else {
    const filteredWithContains = types.filter(p => p.title.includes(typeFromArgs !== null && typeFromArgs !== void 0 ? typeFromArgs : ""));
    const response = await (0, _enquirer.prompt)({
      type: "select",
      name: "projectType",
      message: "Choose a project template",
      choices: (filteredWithContains.length > 0 ? filteredWithContains : types).map(p => _.HumanizeChoices.get(p.title)).map(p => ({
        type: "select",
        name: p.value,
        message: p.title,
        hint: p.description
      }))
    });
    projectType = response.projectType;
  }

  return [`${source}/${projectType}`, projectType];
};

exports.prompt_project_types = prompt_project_types;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,