"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get_random_answers = exports.get_random_answer = exports.get_prompts_and_choices = void 0;

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const get_prompts_and_choices = async (source) => {
  try {
    var _sourcePrompts$prompt;

    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const sourcePrompts = require(_path.default.resolve(source, "prompt.js"));

    return (_sourcePrompts$prompt = sourcePrompts.prompts) !== null && _sourcePrompts$prompt !== void 0 ? _sourcePrompts$prompt : [];
  } catch (e) {
    return [];
  }
};

exports.get_prompts_and_choices = get_prompts_and_choices;

const get_random_answer = (projectPrompt, currentAnswers) => {
  var _ref;

  if (projectPrompt.skip && projectPrompt.skip({
    answers: currentAnswers
  })) {
    return undefined;
  }

  const randomIndex = Math.floor(Math.random() * projectPrompt.choices.length);
  const {
    name,
    value
  } = projectPrompt.choices[randomIndex];
  return [projectPrompt.name, (_ref = name !== null && name !== void 0 ? name : value) !== null && _ref !== void 0 ? _ref : undefined];
};

exports.get_random_answer = get_random_answer;

const get_random_answers = projectPrompts => {
  const answers = {};

  for (const prompt of projectPrompts) {
    var _get_random_answer;

    const [key, value] = (_get_random_answer = get_random_answer(prompt, answers)) !== null && _get_random_answer !== void 0 ? _get_random_answer : [];

    if (key && value) {
      answers[key] = value;
    }
  }

  return { ...answers
  };
};

exports.get_random_answers = get_random_answers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9IZWxwZXIvbHVja3kvaW5kZXgudHMiXSwibmFtZXMiOlsiZ2V0X3Byb21wdHNfYW5kX2Nob2ljZXMiLCJzb3VyY2UiLCJzb3VyY2VQcm9tcHRzIiwicmVxdWlyZSIsInBhdGgiLCJyZXNvbHZlIiwicHJvbXB0cyIsImUiLCJnZXRfcmFuZG9tX2Fuc3dlciIsInByb2plY3RQcm9tcHQiLCJjdXJyZW50QW5zd2VycyIsInNraXAiLCJhbnN3ZXJzIiwidW5kZWZpbmVkIiwicmFuZG9tSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjaG9pY2VzIiwibGVuZ3RoIiwibmFtZSIsInZhbHVlIiwiZ2V0X3JhbmRvbV9hbnN3ZXJzIiwicHJvamVjdFByb21wdHMiLCJwcm9tcHQiLCJrZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQVVPLE1BQU1BLHVCQUF1QixHQUFHLE9BQ25DQyxNQURtQyxLQUVSO0FBQzNCLE1BQUk7QUFBQTs7QUFDQTtBQUNBLFVBQU1DLGFBQWEsR0FBR0MsT0FBTyxDQUFDQyxjQUFLQyxPQUFMLENBQWFKLE1BQWIsRUFBcUIsV0FBckIsQ0FBRCxDQUE3Qjs7QUFFQSxvQ0FBUUMsYUFBYSxDQUFDSSxPQUF0Qix5RUFBaUMsRUFBakM7QUFDSCxHQUxELENBS0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1IsV0FBTyxFQUFQO0FBQ0g7QUFDSixDQVhNOzs7O0FBYUEsTUFBTUMsaUJBQWlCLEdBQUcsQ0FDN0JDLGFBRDZCLEVBRTdCQyxjQUY2QixLQUcwQjtBQUFBOztBQUN2RCxNQUFJRCxhQUFhLENBQUNFLElBQWQsSUFBc0JGLGFBQWEsQ0FBQ0UsSUFBZCxDQUFtQjtBQUFFQyxJQUFBQSxPQUFPLEVBQUVGO0FBQVgsR0FBbkIsQ0FBMUIsRUFBMkU7QUFDdkUsV0FBT0csU0FBUDtBQUNIOztBQUVELFFBQU1DLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQ2hCRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JSLGFBQWEsQ0FBQ1MsT0FBZCxDQUFzQkMsTUFEdEIsQ0FBcEI7QUFJQSxRQUFNO0FBQUVDLElBQUFBLElBQUY7QUFBUUMsSUFBQUE7QUFBUixNQUFrQlosYUFBYSxDQUFDUyxPQUFkLENBQXNCSixXQUF0QixDQUF4QjtBQUVBLFNBQU8sQ0FBQ0wsYUFBYSxDQUFDVyxJQUFmLFVBQXFCQSxJQUFyQixhQUFxQkEsSUFBckIsY0FBcUJBLElBQXJCLEdBQTZCQyxLQUE3Qix1Q0FBc0NSLFNBQXRDLENBQVA7QUFDSCxDQWZNOzs7O0FBaUJBLE1BQU1TLGtCQUFrQixHQUMzQkMsY0FEOEIsSUFFTDtBQUN6QixRQUFNWCxPQUErQixHQUFHLEVBQXhDOztBQUVBLE9BQUssTUFBTVksTUFBWCxJQUFxQkQsY0FBckIsRUFBcUM7QUFBQTs7QUFDakMsVUFBTSxDQUFDRSxHQUFELEVBQU1KLEtBQU4sMEJBQWViLGlCQUFpQixDQUFDZ0IsTUFBRCxFQUFTWixPQUFULENBQWhDLG1FQUFxRCxFQUEzRDs7QUFDQSxRQUFJYSxHQUFHLElBQUlKLEtBQVgsRUFBa0I7QUFDZFQsTUFBQUEsT0FBTyxDQUFDYSxHQUFELENBQVAsR0FBZUosS0FBZjtBQUNIO0FBQ0o7O0FBRUQsU0FBTyxFQUFFLEdBQUdUO0FBQUwsR0FBUDtBQUNILENBYk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5leHBvcnQgdHlwZSBQcm9qZWN0UHJvbXB0ID0ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBcInNlbGVjdFwiO1xuICAgIGNob2ljZXM6IHsgbmFtZT86IHN0cmluZzsgbWVzc2FnZTogc3RyaW5nOyB2YWx1ZT86IHN0cmluZyB9W107XG4gICAgZGVmYXVsdD86IHN0cmluZztcbiAgICBza2lwPzogKHsgYW5zd2VycyB9OiB7IGFuc3dlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfSkgPT4gYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRfcHJvbXB0c19hbmRfY2hvaWNlcyA9IGFzeW5jIChcbiAgICBzb3VyY2U6IHN0cmluZyxcbik6IFByb21pc2U8UHJvamVjdFByb21wdFtdPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICAgICAgY29uc3Qgc291cmNlUHJvbXB0cyA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKHNvdXJjZSwgXCJwcm9tcHQuanNcIikpO1xuXG4gICAgICAgIHJldHVybiAoc291cmNlUHJvbXB0cy5wcm9tcHRzID8/IFtdKSBhcyBQcm9qZWN0UHJvbXB0W107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldF9yYW5kb21fYW5zd2VyID0gKFxuICAgIHByb2plY3RQcm9tcHQ6IFByb2plY3RQcm9tcHQsXG4gICAgY3VycmVudEFuc3dlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4pOiBba2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWRdIHwgdW5kZWZpbmVkID0+IHtcbiAgICBpZiAocHJvamVjdFByb21wdC5za2lwICYmIHByb2plY3RQcm9tcHQuc2tpcCh7IGFuc3dlcnM6IGN1cnJlbnRBbnN3ZXJzIH0pKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKFxuICAgICAgICBNYXRoLnJhbmRvbSgpICogcHJvamVjdFByb21wdC5jaG9pY2VzLmxlbmd0aCxcbiAgICApO1xuXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gcHJvamVjdFByb21wdC5jaG9pY2VzW3JhbmRvbUluZGV4XTtcblxuICAgIHJldHVybiBbcHJvamVjdFByb21wdC5uYW1lLCBuYW1lID8/IHZhbHVlID8/IHVuZGVmaW5lZF07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0X3JhbmRvbV9hbnN3ZXJzID0gKFxuICAgIHByb2plY3RQcm9tcHRzOiBQcm9qZWN0UHJvbXB0W10sXG4pOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0+IHtcbiAgICBjb25zdCBhbnN3ZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IHByb21wdCBvZiBwcm9qZWN0UHJvbXB0cykge1xuICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBnZXRfcmFuZG9tX2Fuc3dlcihwcm9tcHQsIGFuc3dlcnMpID8/IFtdO1xuICAgICAgICBpZiAoa2V5ICYmIHZhbHVlKSB7XG4gICAgICAgICAgICBhbnN3ZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IC4uLmFuc3dlcnMgfTtcbn07XG4iXX0=