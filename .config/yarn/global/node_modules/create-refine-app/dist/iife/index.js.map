{"version":3,"sources":["../../src/index.ts","../../src/example/index.ts","../../src/example/git-init.ts","../../src/example/make-dir.ts","../../src/example/exists-in-repo.ts","../../src/example/download-and-extract.ts","../../src/example/install-dependencies.ts","../../src/example/constants.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from \"commander\";\nimport execa from \"execa\";\nimport { readFileSync } from \"fs\";\nimport handleExample from \"./example\";\n\nconst bootstrap = () => {\n    const packageJson = JSON.parse(\n        readFileSync(`${__dirname}/../package.json`, \"utf8\"),\n    );\n\n    const program = new Command();\n    program\n        .version(\n            packageJson.version,\n            \"-v, --version\",\n            \"Output the current version.\",\n        )\n        .usage(\"<command> [options]\")\n        .helpOption(\"-h, --help\", \"Output usage information.\")\n        .option(\n            \"-s, --source <source-path>\",\n            \"specify a custom source of plugins\",\n        )\n        .option(\n            \"-b, --branch <source-git-branch>\",\n            \"specify a custom branch in source of plugins\",\n        )\n        .option(\n            \"-o, --preset <preset-name>\",\n            \"specify a preset to use for the project\",\n        )\n        .option(\n            \"-l, --lucky\",\n            \"use this option to generate a project with random answers\",\n        )\n        .option(\n            \"-e, --example <example> [destination]\",\n            \"get a clone of an example from the refine repository\",\n        )\n        .option(\n            \"-d, --download <download>\",\n            \"specify a download type (zip | git) of source\",\n            \"zip\",\n        )\n        .allowUnknownOption(true)\n        .allowExcessArguments(true)\n        .action((_, command: Command) => {\n            try {\n                // --example\n                if (command.getOptionValue(\"example\")) {\n                    handleExample(\n                        command.getOptionValue(\"example\"),\n                        command.args[0],\n                    );\n                    return;\n                }\n                // rest\n                const superplateExecutable = require.resolve(\".bin/superplate\");\n                execa.sync(\n                    superplateExecutable,\n                    [\n                        ...command.args,\n                        \"--project=refine\",\n                        \"--download=zip\",\n                        command.getOptionValue(\"source\")\n                            ? \"--source=\" + command.getOptionValue(\"source\")\n                            : \"\",\n                        command.getOptionValue(\"branch\")\n                            ? \"--branch=\" + command.getOptionValue(\"branch\")\n                            : \"\",\n                        command.getOptionValue(\"preset\")\n                            ? \"--preset=\" + command.getOptionValue(\"preset\")\n                            : \"\",\n                        command.getOptionValue(\"lucky\") ? \"--lucky\" : \"\",\n                        command.getOptionValue(\"download\")\n                            ? \"--download=\" + command.getOptionValue(\"download\")\n                            : \"\",\n                    ],\n                    {\n                        stdio: \"inherit\",\n                    },\n                );\n            } catch (err) {}\n        });\n\n    program.parse(process.argv);\n};\n\nbootstrap();\n","import ora from \"ora\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport boxen from \"boxen\";\nimport { gitInit } from \"./git-init\";\nimport { makeDir } from \"./make-dir\";\nimport { existsInRepo } from \"./exists-in-repo\";\nimport { downloadAndExtract } from \"./download-and-extract\";\nimport { findPM, installDependencies } from \"./install-dependencies\";\nimport { GITHUB_ORG, GITHUB_REPO, GITHUB_BRANCH } from \"./constants\";\n\nconst run = async (\n    example: string | boolean | undefined,\n    destination?: string,\n) => {\n    const pm = findPM();\n\n    if (typeof example !== \"string\") {\n        ora(\"You must specify an example name\").fail();\n        console.log(\n            boxen(\n                [\n                    chalk`You can find {bold refine} examples at:`,\n                    \"\",\n                    chalk`{dim.cyan github.com/}{cyan refinedev/refine/tree/master/examples}`,\n                ].join(\"\\n\"),\n                {\n                    title: chalk`No example provided`,\n                    titleAlignment: \"center\",\n                    borderStyle: \"round\",\n                    borderColor: \"gray\",\n                    padding: 1,\n                    textAlignment: \"center\",\n                    margin: 1,\n                    float: \"center\",\n                },\n            ),\n        );\n        process.exit(1);\n    }\n\n    const root = path.resolve(destination || example);\n\n    const existSpinner = ora(\"Checking if example exists in refine\").start();\n    const found = await existsInRepo({\n        organization: GITHUB_ORG,\n        repository: GITHUB_REPO,\n        example,\n        branch: GITHUB_BRANCH,\n    });\n\n    if (found) {\n        existSpinner.succeed(\"Example found in refine repository\");\n    } else {\n        existSpinner.fail(\n            `Could not locate an example named ${chalk.red(`\"${example}\"`)}`,\n        );\n        console.log(\n            boxen(\n                [\n                    chalk`You can find {bold refine} examples at:`,\n                    \"\",\n                    chalk`{dim.cyan github.com/}{cyan refinedev/refine/tree/master/examples}`,\n                ].join(\"\\n\"),\n                {\n                    title: chalk`Example not found`,\n                    titleAlignment: \"center\",\n                    borderStyle: \"round\",\n                    borderColor: \"gray\",\n                    padding: 1,\n                    textAlignment: \"center\",\n                    margin: 1,\n                    float: \"center\",\n                },\n            ),\n        );\n        process.exit(1);\n    }\n\n    const cdPath = root.includes(path.resolve(process.cwd()))\n        ? root.replace(path.resolve(process.cwd()), \".\")\n        : root;\n\n    const dirSpinner = ora(`Creating directory ${chalk.cyan(cdPath)}.`).start();\n\n    const dirStatus = await makeDir(root);\n\n    if (dirStatus === \"already\") {\n        dirSpinner.warn(\n            `Directory ${chalk.cyan(\n                cdPath,\n            )} already exists. Files will be overwritten.`,\n        );\n    } else if (dirStatus === \"failed\") {\n        dirSpinner.fail(`Failed to create directory ${chalk.cyan(cdPath)}.`);\n        process.exit(1);\n    } else {\n        dirSpinner.succeed(`Directory ${chalk.cyan(cdPath)} created.`);\n    }\n\n    const downloadSpinner = ora(\n        `Downloading files for example ${chalk.cyan(\n            example,\n        )}. This might take a moment.`,\n    ).start();\n\n    const downloadStatus = await downloadAndExtract({\n        root,\n        name: example,\n        branch: GITHUB_BRANCH,\n        repo: GITHUB_REPO,\n        org: GITHUB_ORG,\n    });\n\n    if (downloadStatus === \"download-failed\") {\n        downloadSpinner.fail(\n            `Failed to download files for example ${chalk.cyan(example)}.`,\n        );\n        process.exit(1);\n    }\n\n    if (downloadStatus === \"extract-failed\") {\n        downloadSpinner.fail(\n            `Failed to extract files for example ${chalk.cyan(example)}.`,\n        );\n        process.exit(1);\n    }\n\n    downloadSpinner.succeed(\n        `Files downloaded and extracted for example ${chalk.cyan(example)}.`,\n    );\n\n    const installSpinner = ora(\n        \"Installing packages. This might take a couple of minutes.\",\n    ).start();\n\n    const installStatus = await installDependencies(root);\n\n    if (installStatus) {\n        installSpinner.succeed(\"Packages installed successfully.\");\n    } else {\n        installSpinner.fail(\n            \"Failed to install packages. You can try again manually.\",\n        );\n    }\n\n    const gitSpinner = ora(\n        `Initializing Git in ${chalk.cyan(cdPath)}.`,\n    ).start();\n\n    const gitStatus = gitInit(root, \"Initial commit from Create Refine App\");\n\n    if (gitStatus === \"git-not-found\") {\n        gitSpinner.warn(\n            `Git was not found in your PATH. Skipping Git initialization.`,\n        );\n    }\n\n    if (gitStatus === \"already-in-repository\") {\n        gitSpinner.warn(\n            `Directory ${chalk.cyan(\n                cdPath,\n            )} is already a Git repository. Skipping Git initialization.`,\n        );\n    }\n\n    if (gitStatus === \"git-init-failed\") {\n        gitSpinner.warn(\n            `Failed to initialize Git repository in ${chalk.cyan(cdPath)}.`,\n        );\n    }\n\n    if (gitStatus === \"git-commit-failed\") {\n        gitSpinner.warn(\n            `Failed to commit initial commit to Git repository in ${chalk.cyan(\n                cdPath,\n            )}.`,\n        );\n    }\n\n    if (gitStatus === \"success\") {\n        gitSpinner.succeed(\"Created Git repository with initial commit.\");\n    }\n\n    const pmRun = pm === \"yarn\" ? \"\" : \"run \";\n\n    console.log(\n        boxen(\n            [\n                chalk`Created {cyan ${example}} at {cyan ${cdPath}}`,\n                \"\",\n                chalk`Start using your new {bold refine} app by running:`,\n                \"\",\n                chalk`  {bold cd} {cyan ${cdPath}}`,\n                chalk`  {bold ${pm} ${pmRun}}{cyan start}`,\n            ].join(\"\\n\"),\n            {\n                // title: `create-refine-app${version ? ` v${version}` : \"\"}`,\n                title: chalk`{bold.green Success!}`,\n                titleAlignment: \"center\",\n                borderStyle: \"round\",\n                padding: 1,\n                float: \"center\",\n                margin: 1,\n                borderColor: \"gray\",\n            },\n        ),\n    );\n};\n\nexport default run;\n","import execa from \"execa\";\nimport path from \"path\";\nimport rimraf from \"rimraf\";\n\nfunction isInGitRepository(root: string): boolean {\n    try {\n        execa.commandSync(\"git rev-parse --is-inside-work-tree\", {\n            stdio: \"ignore\",\n            cwd: root,\n        });\n        return true;\n    } catch (_) {}\n    return false;\n}\n\nfunction isInMercurialRepository(root: string): boolean {\n    try {\n        execa.commandSync(\"hg --cwd . root\", { stdio: \"ignore\", cwd: root });\n        return true;\n    } catch (_) {}\n    return false;\n}\n\nexport function gitInit(root: string, message: string) {\n    let didInit = false;\n\n    try {\n        execa.commandSync(\"git --version\", { stdio: \"ignore\", cwd: root });\n    } catch (_) {\n        return \"git-not-found\";\n    }\n\n    if (isInGitRepository(root) || isInMercurialRepository(root)) {\n        return \"already-in-repository\";\n    }\n\n    try {\n        execa.commandSync(\"git init\", { stdio: \"ignore\", cwd: root });\n    } catch (e) {\n        return \"git-init-failed\";\n    }\n\n    didInit = true;\n\n    try {\n        execa.commandSync(\"git checkout -b main\", {\n            stdio: \"ignore\",\n            cwd: root,\n        });\n\n        execa.commandSync(\"git add -A\", { stdio: \"ignore\", cwd: root });\n\n        execa.sync(\"git\", [\"commit\", `--message=\"${message}\"`], {\n            stdio: \"ignore\",\n            cwd: root,\n        });\n    } catch (e) {\n        if (didInit) {\n            try {\n                rimraf.sync(path.join(root, \".git\"));\n            } catch (_) {}\n        }\n\n        return \"git-commit-failed\";\n    }\n\n    return \"success\";\n}\n","import fs from \"fs\";\n\nexport async function makeDir(\n    root: string,\n    options = { recursive: true },\n): Promise<\"already\" | \"success\" | \"failed\"> {\n    try {\n        if (fs.existsSync(root)) {\n            return \"already\";\n        }\n        await fs.promises.mkdir(root, options);\n        return \"success\";\n    } catch (err) {\n        return \"failed\";\n    }\n}\n","import got from \"got\";\n\nasync function isUrlOk(url: string): Promise<boolean> {\n    const res = await got.head(url).catch((e) => e);\n    return res.statusCode === 200;\n}\n\nexport async function existsInRepo({\n    organization,\n    repository,\n    example,\n    branch,\n}: {\n    organization: string;\n    repository: string;\n    example: string;\n    branch: string;\n}): Promise<boolean> {\n    return isUrlOk(\n        `https://api.github.com/repos/${organization}/${repository}/contents/examples/${encodeURIComponent(\n            example,\n        )}?ref=${branch}`,\n    );\n}\n","import got from \"got\";\nimport tar from \"tar\";\nimport { Stream } from \"stream\";\nimport { promisify } from \"util\";\nimport { join } from \"path\";\nimport { createWriteStream, promises as fs } from \"fs\";\n\nconst pipeline = promisify(Stream.pipeline);\n\nconst TEMP_PREFIX = \".refine-example.temp\";\n\nasync function downloadTar(url: string) {\n    const tempFile = join(process.cwd(), `${TEMP_PREFIX}-${Date.now()}`);\n    try {\n        await pipeline(got.stream(url), createWriteStream(tempFile));\n        return tempFile;\n    } catch (err) {\n        try {\n            await fs.unlink(tempFile);\n        } catch (err) {\n            // ignore\n        }\n        return undefined;\n    }\n}\n\nexport async function downloadAndExtract({\n    root,\n    name,\n    branch,\n    repo,\n    org,\n}: {\n    root: string;\n    name: string;\n    branch: string;\n    repo: string;\n    org: string;\n}) {\n    const tempFile = await downloadTar(\n        `https://codeload.github.com/${org}/${repo}/tar.gz/${branch}`,\n    );\n\n    if (!tempFile) {\n        return \"download-failed\";\n    }\n\n    try {\n        await tar.x({\n            file: tempFile,\n            cwd: root,\n            strip: 3,\n            filter: (p) => {\n                if (p.includes(`${repo}-${branch}/examples/${name}/`)) {\n                    return true;\n                }\n                return false;\n            },\n        });\n    } catch (err) {\n        try {\n            await fs.unlink(tempFile);\n        } catch (err) {\n            // ignore\n        }\n        return \"extract-failed\";\n    }\n\n    try {\n        await fs.unlink(tempFile);\n    } catch (err) {\n        // ignore\n    }\n\n    return \"success\";\n}\n","import execa from \"execa\";\nimport whichPMRuns from \"which-pm-runs\";\n\nexport function findPM() {\n    try {\n        const { name } = whichPMRuns() || {};\n        return name ?? \"npm\";\n    } catch (err) {\n        return \"npm\";\n    }\n}\n\nexport async function installDependencies(root: string) {\n    try {\n        await execa(findPM(), [\"install\"], {\n            cwd: root,\n            stdio: \"ignore\",\n        });\n        return true;\n    } catch (err) {\n        return false;\n    }\n}\n","export const GITHUB_ORG = \"refinedev\";\nexport const GITHUB_REPO = \"refine\";\nexport const GITHUB_BRANCH = \"master\";\n"],"mappings":"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","names":["import_commander","import_execa","import_fs","import_ora","import_path","import_chalk","import_boxen","import_execa","import_path","import_rimraf","isInGitRepository","root","execa","isInMercurialRepository","gitInit","message","didInit","rimraf","path","import_fs","makeDir","root","options","fs","import_got","isUrlOk","url","got","e","existsInRepo","organization","repository","example","branch","import_got","import_tar","import_stream","import_util","import_path","import_fs","pipeline","TEMP_PREFIX","downloadTar","url","tempFile","got","fs","downloadAndExtract","root","name","branch","repo","org","tar","p","import_execa","import_which_pm_runs","findPM","name","whichPMRuns","installDependencies","root","execa","GITHUB_ORG","GITHUB_REPO","GITHUB_BRANCH","run","example","destination","pm","findPM","ora","boxen","chalk","root","path","existSpinner","existsInRepo","GITHUB_ORG","GITHUB_REPO","GITHUB_BRANCH","cdPath","dirSpinner","dirStatus","makeDir","downloadSpinner","downloadStatus","downloadAndExtract","installSpinner","installDependencies","gitSpinner","gitStatus","gitInit","pmRun","example_default","bootstrap","packageJson","program","_","command","example_default","superplateExecutable","__require","execa"]}