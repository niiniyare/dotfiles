"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeWithUnionArray = exports.mergePackages = exports.mergeBabel = exports.mergePluginData = exports.mergeJSONFiles = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = require("fs");

var _util = require("util");

var _mergeWith = _interopRequireDefault(require("lodash/mergeWith"));

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _union = _interopRequireDefault(require("lodash/union"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getPluginFile = (pluginPath, pluginName, fileName) => {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const pluginFile = require(_path.default.join(pluginPath, "plugins", pluginName, fileName));

    return pluginFile;
  } catch (e) {
    return undefined;
  }
};

const getStringFile = async (pluginPath, pluginName, fileName) => {
  try {
    const str = await (0, _util.promisify)(_fs.readFile)(_path.default.join(pluginPath, "plugins", pluginName, fileName), "utf8");

    if (typeof str === "string") {
      return str;
    } else {
      return "{}";
    }
  } catch (e) {
    return "{}";
  }
};

const mergeJSONFiles = (base = {}, pluginsPath, plugins, fileName) => {
  const baseFile = { ...base
  };
  const pluginFiles = plugins.map(plugin => {
    const file = getPluginFile(pluginsPath, plugin, fileName);
    return file !== null && file !== void 0 ? file : {};
  });
  return mergeWithUnionArray(baseFile, ...pluginFiles);
};

exports.mergeJSONFiles = mergeJSONFiles;

const mergePluginData = (base = {}, pluginsPath, plugins, fileName) => {
  const baseFile = { ...base
  };
  baseFile.plugins = [];
  plugins.map(plugin => {
    var _getPluginFile, _ref, _ref2, _ref3;

    if (["npm", "yarn", "react", "nextjs", "refine"].includes(plugin)) return;
    const file = (_getPluginFile = getPluginFile(pluginsPath, plugin, fileName)) !== null && _getPluginFile !== void 0 ? _getPluginFile : {};
    baseFile.plugins.push({
      name: (_ref = file.name) !== null && _ref !== void 0 ? _ref : plugin,
      description: (_ref2 = file.description) !== null && _ref2 !== void 0 ? _ref2 : "",
      url: (_ref3 = file.url) !== null && _ref3 !== void 0 ? _ref3 : ""
    });
  });
  return baseFile;
};

exports.mergePluginData = mergePluginData;

const mergeBabel = async (base, pluginsPath, plugins) => {
  var _ref4;

  const baseBabel = { ...base
  };
  const pluginRcs = await Promise.all(plugins.map(async plugin => {
    const str = await getStringFile(pluginsPath, plugin, ".babelrc");
    const parsed = JSON.parse(str);
    return parsed !== null && parsed !== void 0 ? parsed : {};
  }));
  const merged = mergeWithUnionArray(baseBabel, ...pluginRcs);
  const uniquePresets = [];
  const presetsSet = new Set((_ref4 = merged.presets) !== null && _ref4 !== void 0 ? _ref4 : []);
  presetsSet.forEach(el => uniquePresets.push(el));
  merged.presets = uniquePresets;
  return merged;
};

exports.mergeBabel = mergeBabel;

const mergePackages = (base = {}, pluginsPath, plugins, answers) => {
  const basePkg = { ...base
  };
  const pluginPkgs = plugins.map(plugin => {
    const pluginPkg = getPluginFile(pluginsPath, plugin, "package.json");
    const pluginPkgFn = getPluginFile(pluginsPath, plugin, "package.js");

    if (pluginPkgFn && pluginPkg) {
      const fnPkg = pluginPkgFn.apply(pluginPkg, answers);
      return fnPkg;
    } else if (pluginPkg) {
      return pluginPkg;
    }

    return {};
  });
  return mergeWithUnionArray(basePkg, ...pluginPkgs);
};

exports.mergePackages = mergePackages;

const unionArrays = (objValue, srcValue) => {
  if ((0, _isArray.default)(objValue) && (0, _isArray.default)(srcValue)) {
    return (0, _union.default)(objValue, srcValue);
  }
};

const mergeWithUnionArray = (...args) => (0, _mergeWith.default)({}, ...args, unionArrays);

exports.mergeWithUnionArray = mergeWithUnionArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,