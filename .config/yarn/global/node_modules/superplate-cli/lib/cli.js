"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _clear = _interopRequireDefault(require("clear"));

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

var _temp = require("temp");

var _sao = require("sao");

var _package = _interopRequireDefault(require("../package.json"));

var _Helper = require("./Helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const generator = _path.default.resolve(__dirname, "./"); // for cleanup temp files


(0, _temp.track)(); //

const cli = async () => {
  (0, _clear.default)();

  const program = _commander.default.name(_package.default.name).version(_package.default.version).arguments("<project-directory>").usage(`${_chalk.default.green("<project-directory>")} [options]`).description(_package.default.description).option("-s, --source <source-path>", "specify a custom source of plugins").option("-b, --branch <source-git-branch>", "specify a custom branch in source of plugins").option("-o, --preset <preset-name>", "specify a preset to use for the project").option("-l, --lucky", "use this option to generate a project with random answers").option("-d, --download <download>", "specify a download type (zip | git) of source", "git").option("-p, --project <project-name>", "specify a project type to use").option("-d, --debug", "print additional logs and skip install script").on("--help", () => {
    console.log();
    console.log(`  Only ${_chalk.default.green("<project-directory>")} is required.`);
    console.log();
    console.log(`  Provide a ${_chalk.default.green.bold`<project-directory>`} and you will be prompted to proceed.`);
    console.log();
    console.log(`  If you want to use custom plugins. You need to provide a source.`);
    console.log();
    console.log(`  A custom source can be one of:`);
    console.log(`  - a remote git repo: ${_chalk.default.green("https://github.com/my-plugin-source.git")}`);
    console.log(`  - if your source is a git repo you can also define a custom branch in it: ${_chalk.default.green("--branch canary or -b canary")}`);
    console.log(`  - if your source includes any presets, you can set them to prefill choices: ${_chalk.default.green("--preset cool-stack or -o cool-stack")}`);
    console.log(`  - if you are feeling lucky, you can always try your chance with random selected choices: ${_chalk.default.green("--lucky or -l")}`);
    console.log(`  - if you want to use zip instead of git clone: ${_chalk.default.green("--download zip or -d zip")}`);
    console.log(`  - a local path relative to the current working directory: ${_chalk.default.green("../my-source")}`);
    console.log();
  }).parse(process.argv);
  /**
   * Check for project-directory defined
   */


  const [projectDir] = program.args;
  const finalProjectDir = projectDir || (0, _Helper.getRandomName)().replace(/\s/g, "-").toLowerCase();
  /**
   * get source path
   */

  const source = await (0, _Helper.get_source)(program.source, program.branch, program.download);
  let {
    path: sourcePath
  } = source;
  const {
    error: sourceError
  } = source;

  if (sourceError) {
    console.error(`${_chalk.default.bold`${sourceError}`}`);
    console.log(`Source can be a remote git repository or a local path. ${program.branch ? "Make sure your specified branch exists." : ""}`);
    console.log();
    console.log("You provided:");
    console.log(`${_chalk.default.blueBright(program.source)}`);
    console.log();
    console.log(`Run ${_chalk.default.cyan(`${program.name()} --help`)} to see all options.`);
    (0, _temp.cleanupSync)();
    process.exit(1);
  }

  let projectType = program.project;
  const isMultiType = await (0, _Helper.is_multi_type)(sourcePath);
  /** handle presets, can either be partial or fully provided answers from `prompt.js > presets` */

  let presetAnswers = undefined;
  const selectedPreset = program.preset;
  const isLucky = program.lucky;

  if (selectedPreset && sourcePath && !isLucky) {
    const presets = await (0, _Helper.get_presets)(sourcePath);
    const preset = presets.find(p => p.name === selectedPreset);

    if (preset) {
      presetAnswers = preset.answers;
      projectType = preset.type;
    } else {
      console.log(`${_chalk.default.bold`${selectedPreset}`} is not a valid preset.`);
    }
  }

  if (sourcePath && isMultiType) {
    // get project types
    const projectTypes = await (0, _Helper.get_project_types)(sourcePath);
    const [finalSourcePath, selectedProjectType] = await (0, _Helper.prompt_project_types)(sourcePath, projectTypes, projectType);
    sourcePath = finalSourcePath;
    projectType = selectedProjectType;
  }

  if (isLucky && sourcePath) {
    const promptsAndChoices = await (0, _Helper.get_prompts_and_choices)(sourcePath);
    presetAnswers = (0, _Helper.get_random_answers)(promptsAndChoices);
  }

  const withAnswers = presetAnswers && Object.keys(presetAnswers).length > 0 ? true : undefined;
  const sao = new _sao.SAO({
    generator,
    outDir: finalProjectDir,
    logLevel: program.debug ? 4 : 1,
    appName: finalProjectDir,
    answers: withAnswers,
    extras: {
      debug: !!program.debug,
      projectType,
      paths: {
        sourcePath
      },
      presetAnswers
    }
  });
  await sao.run().catch(err => {
    console.log(`${program.name()} has encountered an error.`);
    console.log();
    console.log(`If you think this is caused by a bug. Please check out:`);
    console.log(`${_chalk.default.blueBright(_package.default.bugs.url)}`);
    console.log();
    console.error("ERROR", err);
    process.exit(1);
  });
  (0, _temp.cleanupSync)();
};

var _default = cli;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,