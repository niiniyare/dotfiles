"use strict";

var _path = _interopRequireDefault(require("path"));

var _validateNpmPackageName = _interopRequireDefault(require("validate-npm-package-name"));

var _child_process = require("child_process");

var _util = require("util");

var _chalk = _interopRequireDefault(require("chalk"));

var _uuid = require("uuid");

var _analyticsNode = _interopRequireDefault(require("analytics-node"));

var _Helper = require("./Helper");

var _process$env$SEGMENT_;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const analytics = new _analyticsNode.default((_process$env$SEGMENT_ = "dNsgapkYciyGCtTCySYcdHG7yTGI6IwV") !== null && _process$env$SEGMENT_ !== void 0 ? _process$env$SEGMENT_ : "");
const saoConfig = {
  prompts(sao) {
    var _sourcePrompts$prompt;

    const {
      appName,
      extras: {
        paths,
        presetAnswers
      }
    } = sao.opts; // eslint-disable-next-line @typescript-eslint/no-var-requires

    const sourcePrompts = require(_path.default.resolve(paths.sourcePath, "prompt.js"));

    const packageManagerChoices = (0, _Helper.get_potential_package_managers)();
    return [{
      type: "input",
      name: "name",
      message: "What would you like to name your project?:",
      default: appName,
      validate: name => {
        const appNameValidation = (0, _validateNpmPackageName.default)(name);

        if (appNameValidation.errors) {
          return false;
        }

        return true;
      }
    }, ...((_sourcePrompts$prompt = sourcePrompts === null || sourcePrompts === void 0 ? void 0 : sourcePrompts.prompts) !== null && _sourcePrompts$prompt !== void 0 ? _sourcePrompts$prompt : []).map(el => {
      var _presetAnswers$el$nam;

      return { ...el,
        default: (_presetAnswers$el$nam = presetAnswers === null || presetAnswers === void 0 ? void 0 : presetAnswers[el.name]) !== null && _presetAnswers$el$nam !== void 0 ? _presetAnswers$el$nam : el.default
      };
    }), {
      type: "select",
      name: "npmClient",
      message: "Choose a package manager:",
      choices: packageManagerChoices,
      default: packageManagerChoices.length === 1 ? packageManagerChoices[0].name : undefined,
      skip: () => packageManagerChoices.length === 1
    }];
  },

  data(sao) {
    /**
     * Package Manager
     */
    const {
      npmClient
    } = sao.answers;
    let pmRun = "npm run";

    if (npmClient === "yarn") {
      pmRun = "yarn";
    } else if (npmClient === "pnpm") {
      pmRun = "pnpm";
    }
    /**
     * Extend.js data
     */


    const {
      sourcePath
    } = sao.opts.extras.paths;
    const {
      projectType
    } = sao.opts.extras;
    const pluginAnswers = { ...sao.answers
    };
    delete pluginAnswers.name;
    const selectedPlugins = (0, _Helper.getPluginsArray)(pluginAnswers);
    const extendData = (0, _Helper.concatExtend)(_Helper.extendBase, selectedPlugins, sourcePath, sao.answers);
    /**
     * Plugins meta data
     */

    const pluginsData = (0, _Helper.mergePluginData)({}, sourcePath, selectedPlugins, "meta.json").plugins;
    const metaJSONPath = projectType === "react" ? "src/meta.json" : "public/meta.json";
    /**
     * Return
     */

    return { ...sao.answers,
      projectType,
      answers: sao.answers,
      selectedPlugins,
      pm: npmClient,
      pmRun,
      pluginsData,
      metaJSONPath,
      ...extendData
    };
  },

  async actions(sao) {
    if (sao.answers.name.length === 0) {
      const error = sao.createError("App name is required!");
      throw error;
    }

    const appNameValidation = (0, _validateNpmPackageName.default)(sao.answers.name);

    if (appNameValidation.warnings) {
      appNameValidation.warnings.forEach(warn => this.logger.warn(warn));
    }

    if (appNameValidation.errors) {
      appNameValidation.errors.forEach(warn => this.logger.error(warn));
      process.exit(1);
    }

    sao.opts.outDir = sao.answers.name;
    sao.opts.appName = sao.answers.name;
    const {
      sourcePath
    } = sao.opts.extras.paths;
    const actionsArray = [{
      type: "add",
      files: "**",
      templateDir: _path.default.join(sourcePath, "template"),

      data() {
        return sao.data;
      }

    }, {
      type: "move",
      templateDir: _path.default.join(sourcePath, "template"),
      patterns: {
        gitignore: ".gitignore",
        "_package.json": "package.json",
        "_next-env.d.ts": "next-env.d.ts",
        "_tsconfig.json": "tsconfig.json",
        babelrc: ".babelrc"
      },

      data() {
        return sao.data;
      }

    }];
    const pluginAnswers = { ...sao.answers
    };
    delete pluginAnswers.name;
    const selectedPlugins = (0, _Helper.getPluginsArray)(pluginAnswers); // eslint-disable-next-line @typescript-eslint/no-var-requires

    const sourcePrompts = require(_path.default.resolve(sourcePath, "prompt.js"));

    actionsArray.push(...selectedPlugins.map(plugin => {
      var _sourcePrompts$ignore;

      const customFilters = (0, _Helper.handleIgnore)((_sourcePrompts$ignore = sourcePrompts === null || sourcePrompts === void 0 ? void 0 : sourcePrompts.ignores) !== null && _sourcePrompts$ignore !== void 0 ? _sourcePrompts$ignore : [], sao.answers, plugin);
      return {
        type: "add",
        files: "**",
        templateDir: _path.default.join(sourcePath, "plugins", plugin),
        filters: {
          "extend.js": false,
          "package.json": false,
          "package.js": false,
          "tsconfig.json": false,
          ".babelrc": false,
          "meta.json": false,
          ...customFilters
        },

        data() {
          return sao.data;
        }

      };
    }));
    /**
     * eslintrc handler
     */

    actionsArray.push({
      type: "move",
      patterns: {
        "_.eslintrc": ".eslintrc"
      },

      data() {
        return sao.data;
      }

    });
    /**
     * meta.json handler
     */

    actionsArray.push({
      type: "modify",
      files: sao.data.metaJSONPath,

      handler(data) {
        return (0, _Helper.mergePluginData)(data, sourcePath, selectedPlugins, "meta.json");
      }

    });
    /**
     * package.json handler
     */

    actionsArray.push({
      type: "modify",
      files: "package.json",

      handler(data) {
        return (0, _Helper.mergePackages)(data, sourcePath, selectedPlugins, sao.answers);
      }

    });
    /**
     * tsconfig.json handler
     */

    actionsArray.push({
      type: "modify",
      files: "tsconfig.json",

      handler(data) {
        return (0, _Helper.mergeJSONFiles)(data, sourcePath, selectedPlugins, "tsconfig.json");
      }

    });
    /**
     * .babelrc handler
     */

    actionsArray.push({
      type: "modify",
      files: ".babelrc",

      async handler(data) {
        const merged = await (0, _Helper.mergeBabel)(JSON.parse(data), sourcePath, selectedPlugins);
        return JSON.stringify(merged);
      }

    });
    const {
      telemetry
    } = await (0, _Helper.prompt_telemetry)();

    if (telemetry === "yes") {
      analytics.track({
        event: "generate",
        properties: { ...sao.answers,
          type: sao.opts.extras.projectType
        },
        anonymousId: (0, _uuid.v4)()
      });
    }

    return actionsArray;
  },

  async prepare() {
    _Helper.tips.preInstall();
  },

  async completed(saoInstance) {
    var _saoInstance$opts$app;

    const {
      debug
    } = saoInstance.opts.extras;
    const {
      npmClient
    } = saoInstance.answers;
    /**
     * Git init and install packages
     */

    if (!debug) {
      saoInstance.gitInit();
      await saoInstance.npmInstall({
        npmClient: npmClient,
        installArgs: ["--silent"]
      });
    }
    /**
     * Format generated project
     */


    await (0, _util.promisify)(_child_process.exec)(`npx prettier "${saoInstance.outDir}" --write`);
    /**
     * Create an initial commit
     */

    if (!debug) {
      try {
        // add
        await (0, _util.promisify)(_child_process.exec)(`git --git-dir="${saoInstance.outDir}"/.git/ --work-tree="${saoInstance.outDir}"/ add -A`); // commit

        await (0, _util.promisify)(_child_process.exec)(`git --git-dir="${saoInstance.outDir}"/.git/ --work-tree="${saoInstance.outDir}"/ commit -m "initial commit with superplate"`);
        saoInstance.logger.info("created an initial commit.");
      } catch (_) {
        console.log(_chalk.default.yellow`An error occured while creating git commit.`);
      }
    }
    /**
     * Show messages after completion
     */


    _Helper.tips.postInstall({
      name: (_saoInstance$opts$app = saoInstance.opts.appName) !== null && _saoInstance$opts$app !== void 0 ? _saoInstance$opts$app : "",
      dir: saoInstance.outDir,
      pm: npmClient
    });
  }

};
module.exports = saoConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,